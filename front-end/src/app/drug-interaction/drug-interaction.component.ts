import { HttpClient } from '@angular/common/http';
import { Component, OnInit } from '@angular/core';
import { debounceTime } from 'rxjs/operators';

// Generated by https://quicktype.io

export interface Drug {
  id: string;
  text: string;
  val: string;
  type: number;
  has_interactions: string;
}

export interface MultiInteractions {
  [key: string]: {
    subject: string;
    object: string;
    message: string;
  }[];
}

export interface Interactions {
  severity: string;
  severityId: number;
  subject: string;
  object: string;
  text: string;
}

@Component({
  selector: 'app-drug-interaction',
  templateUrl: './drug-interaction.component.html',
  styleUrls: ['./drug-interaction.component.scss'],
})
export class DrugInteractionComponent implements OnInit {
  selectedDrug: Drug[];
  interactions: MultiInteractions = {};
  drugs: Drug[] = [
    {
      id: '342955',
      text: 'fluoxetine',
      val: 'fluoxetine',
      type: 10417,
      has_interactions: '1',
    },
    {
      id: '342182',
      text: 'warfarin',
      val: 'warfarin',
      type: 10417,
      has_interactions: '1',
    },
    {
      id: '343346',
      text: 'acetaminophen',
      val: 'acetaminophen',
      type: 10417,
      has_interactions: '1',
    },
    {
      id: '342524',
      text: 'clarithromycin',
      val: 'clarithromycin',
      type: 10417,
      has_interactions: '1',
    },
    {
      id: '342548',
      text: 'Doxy',
      val: 'doxycycline',
      type: 10417,
      has_interactions: '1',
    },
    {
      id: '343544',
      text: 'isotretinoin',
      val: 'isotretinoin',
      type: 10417,
      has_interactions: '1',
    },
    {
      id: '341983',
      text: 'calcium carbonate',
      val: 'calcium carbonate',
      type: 10417,
      has_interactions: '1',
    },
    {
      id: '342548',
      text: 'doxycycline',
      val: 'doxycycline',
      type: 10417,
      has_interactions: '1',
    },
  ];

  searchDebounce: any;

  constructor(private http: HttpClient) {}

  ngOnInit(): void {}

  searchDrug(search: string) {
    let corsProxyUrl = 'https://cors-anywhere.herokuapp.com/';
    const url = `https://www.medscape.com/api/quickreflookup/LookupService.ashx?q=${search}&sz=500&type=10417&metadata=has-interactions`;

    if (this.searchDebounce) {
      clearTimeout(this.searchDebounce);
    }
    if (search.length < 3) {
      // this.drugs = [];
      return;
    }

    this.searchDebounce = setTimeout(
      () =>
        this.http.get<Drug[]>(corsProxyUrl + url).subscribe(
          (response: any) => {
            if (response?.types[0]?.totalCount > 0)
              this.drugs = response.types[0].references;
          },
          (error: any) => {
            console.error('Error fetching drugs:', error);
          }
        ),
      500
    );
  }

  checkInteractions() {
    if (!this.selectedDrug) {
      return;
    }
    const ids = this.selectedDrug.map((drug) => drug.id).join(',');
    let corsProxyUrl = 'https://cors-anywhere.herokuapp.com/';
    const url = `https://reference.medscape.com/druginteraction.do?action=getMultiInteraction&ids=${ids}`;
    // const url = `https://reference.medscape.com/druginteraction.do?action=getMultiInteraction&ids=342524,342182,343346,342955`;

    this.http
      .get<{ errorCode: number; multiInteractions: Interactions[] }>(
        corsProxyUrl + url
      )
      .subscribe(
        (response: {
          errorCode: number;
          multiInteractions: Interactions[];
        }) => {
          response.multiInteractions.forEach((interaction: any) => {
            if (!this.interactions[interaction.severity]) {
              this.interactions[interaction.severity] = [];
            }
            this.interactions[interaction.severity] = [
              ...this.interactions[interaction.severity],
              {
                subject: interaction.subject,
                object: interaction.object,
                message: interaction.text,
              },
            ];
          });
          console.log(this.interactions);
        },
        (error: any) => {
          console.error('Error fetching drugs:', error);
        }
      );
  }
}
