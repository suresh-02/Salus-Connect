using System.IO;

namespace SalusConnect.Api.Services
{
    public interface IAmazonS3Service
    {
        Task<string> UploadProfileImage(IFormFile formFile, string fileName);

        Task DeleteFile(string fileName, string versionId);
    }

    public class AmazonS3Service : IAmazonS3Service
    {
        private readonly ILogger<AmazonS3Service> _logger;
        private readonly AppSettings _settings;

        public AmazonS3Service(IOptions<AppSettings> settings, ILogger<AmazonS3Service> logger)
        {
            _settings = settings.Value;
            _logger = logger;
        }

        public async Task<string> UploadProfileImage(IFormFile formFile, string fileName)
        {
            try
            {
                //string s3BasePath = "https://simplydoc-testing-profile-images.s3.ca-central-1.amazonaws.com/profile-images/";
                //var file = Request.Form.Files[0];
                //var fileName = ContentDispositionHeaderValue.Parse(formFile.ContentDisposition).FileName?.Trim('"');
                // access key id and secret key id, can be generated by navigating to IAM roles in AWS and then add new user, select permissions
                //for this example, try giving S3 full permissions
                using (var client = new Amazon.S3.AmazonS3Client(_settings.AmazonS3.AccessKeyId,
                    _settings.AmazonS3.SecretAccessKey, Amazon.RegionEndpoint.CACentral1))
                {
                    using (var newMemoryStream = new MemoryStream())
                    {
                        formFile.CopyTo(newMemoryStream);

                        var uploadRequest = new Amazon.S3.Transfer.TransferUtilityUploadRequest
                        {
                            InputStream = newMemoryStream,
                            BucketName = _settings.AmazonS3.BucketName,                 // bucket name of S3
                            Key = $"{_settings.AmazonS3.ImagesDirectory}/{fileName}",  // filename
                            ContentType = formFile.ContentType
                        };
                        var fileTransferUtility = new Amazon.S3.Transfer.TransferUtility(client);
                        await fileTransferUtility.UploadAsync(uploadRequest); //.UploadAsync(uploadRequest);
                    }
                }
                return $"/{_settings.AmazonS3.ImagesDirectory}/{fileName}";
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, "Error while uploading file to S3: {Message}", ex.Message);
                return string.Empty;
            }
        }

        public async Task DeleteFile(string fileName, string versionId)
        {
            using (var client = new Amazon.S3.AmazonS3Client(_settings.AmazonS3.AccessKeyId,
                _settings.AmazonS3.SecretAccessKey, Amazon.RegionEndpoint.CACentral1))
            {
                var request = new Amazon.S3.Model.DeleteObjectRequest
                {
                    BucketName = _settings.AmazonS3.BucketName,
                    Key = fileName
                };
                if (!string.IsNullOrEmpty(versionId))
                    request.VersionId = versionId;

                var response = await client.DeleteObjectAsync(request);
            }
        }
    }
}